// com.cstestforge.repository.BaseRepository.java
package com.cstestforge.repository;

import java.util.List;
import java.util.Optional;

public interface BaseRepository<T, ID> {
    T save(T entity);
    Optional<T> findById(ID id);
    List<T> findAll();
    void deleteById(ID id);
    boolean existsById(ID id);
}


// com.cstestforge.repository.ProjectRepository.java
package com.cstestforge.repository;

import com.cstestforge.model.project.Project;
import java.util.List;

public interface ProjectRepository extends BaseRepository<Project, String> {
    List<Project> findByName(String name);
}

// com.cstestforge.repository.TestCaseRepository.java
package com.cstestforge.repository;

import com.cstestforge.model.testcase.TestCase;
import java.util.List;

public interface TestCaseRepository extends BaseRepository<TestCase, String> {
    List<TestCase> findByProjectId(String projectId);
}

// com.cstestforge.repository.TestSuiteRepository.java
package com.cstestforge.repository;

import com.cstestforge.model.testsuite.TestSuite;
import java.util.List;

public interface TestSuiteRepository extends BaseRepository<TestSuite, String> {
    List<TestSuite> findByProjectId(String projectId);
}

// com.cstestforge.repository.ExecutionRepository.java
package com.cstestforge.repository;

import com.cstestforge.model.execution.ExecutionSummary;
import java.util.List;

public interface ExecutionRepository extends BaseRepository<ExecutionSummary, String> {
    List<ExecutionSummary> findByProjectId(String projectId);
}



// com.cstestforge.repository.FileSystemRepository.java
package com.cstestforge.repository;

import java.util.List;
import java.util.Optional;

public interface FileSystemRepository {
    <T> T save(String id, T entity, String type);
    <T> Optional<T> findById(String id, Class<T> entityClass, String type);
    <T> List<T> findAll(Class<T> entityClass, String type);
    void deleteById(String id, String type);
    boolean existsById(String id, String type);
    boolean existsById(String id);
}


// com.cstestforge.repository.impl.FileSystemRepositoryImpl.java
package com.cstestforge.repository.impl;

import com.cstestforge.repository.FileSystemRepository;
import com.cstestforge.util.FileUtils;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.stereotype.Component;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@Component
public class FileSystemRepositoryImpl implements FileSystemRepository {

    private final String basePath;
    private final ObjectMapper objectMapper;

    public FileSystemRepositoryImpl() {
        this.basePath = System.getProperty("user.home") + "/cstestforge-data";
        this.objectMapper = new ObjectMapper();
        
        try {
            Files.createDirectories(Paths.get(basePath));
        } catch (IOException e) {
            throw new RuntimeException("Failed to create base directory", e);
        }
    }

    @Override
    public <T> T save(String id, T entity, String type) {
        String directoryPath = basePath + "/" + type;
        String filePath = directoryPath + "/" + id + ".json";
        
        try {
            Files.createDirectories(Paths.get(directoryPath));
            String json = objectMapper.writeValueAsString(entity);
            Files.writeString(Paths.get(filePath), json);
            return entity;
        } catch (IOException e) {
            throw new RuntimeException("Failed to save entity", e);
        }
    }

    @Override
    public <T> Optional<T> findById(String id, Class<T> entityClass, String type) {
        String filePath = basePath + "/" + type + "/" + id + ".json";
        Path path = Paths.get(filePath);
        
        if (!Files.exists(path)) {
            return Optional.empty();
        }
        
        try {
            String json = Files.readString(path);
            T entity = objectMapper.readValue(json, entityClass);
            return Optional.of(entity);
        } catch (IOException e) {
            throw new RuntimeException("Failed to read entity", e);
        }
    }

    @Override
    public <T> List<T> findAll(Class<T> entityClass, String type) {
        String directoryPath = basePath + "/" + type;
        Path dirPath = Paths.get(directoryPath);
        
        try {
            if (!Files.exists(dirPath)) {
                Files.createDirectories(dirPath);
                return List.of();
            }
            
            return Files.list(dirPath)
                .filter(path -> path.toString().endsWith(".json"))
                .map(path -> {
                    try {
                        String json = Files.readString(path);
                        return objectMapper.readValue(json, entityClass);
                    } catch (IOException e) {
                        throw new RuntimeException("Failed to read entity", e);
                    }
                })
                .collect(Collectors.toList());
        } catch (IOException e) {
            throw new RuntimeException("Failed to list entities", e);
        }
    }

    @Override
    public void deleteById(String id, String type) {
        String filePath = basePath + "/" + type + "/" + id + ".json";
        try {
            Files.deleteIfExists(Paths.get(filePath));
        } catch (IOException e) {
            throw new RuntimeException("Failed to delete entity", e);
        }
    }

    @Override
    public boolean existsById(String id, String type) {
        String filePath = basePath + "/" + type + "/" + id + ".json";
        return Files.exists(Paths.get(filePath));
    }

    @Override
    public boolean existsById(String id) {
        try {
            return Files.walk(Paths.get(basePath))
                .filter(Files::isRegularFile)
                .anyMatch(path -> path.getFileName().toString().equals(id + ".json"));
        } catch (IOException e) {
            throw new RuntimeException("Failed to check entity existence", e);
        }
    }
}



// com.cstestforge.repository.impl.ProjectRepositoryImpl.java
package com.cstestforge.repository.impl;

import com.cstestforge.model.project.Project;
import com.cstestforge.repository.ProjectRepository;
import com.cstestforge.repository.FileSystemRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@Component
public class ProjectRepositoryImpl implements ProjectRepository {

    private static final String TYPE = "projects";
    
    private final FileSystemRepository fileSystemRepository;
    
    @Autowired
    public ProjectRepositoryImpl(FileSystemRepository fileSystemRepository) {
        this.fileSystemRepository = fileSystemRepository;
    }
    
    @Override
    public Project save(Project project) {
        return fileSystemRepository.save(project.getId(), project, TYPE);
    }
    
    @Override
    public Optional<Project> findById(String id) {
        return fileSystemRepository.findById(id, Project.class, TYPE);
    }
    
    @Override
    public List<Project> findAll() {
        return fileSystemRepository.findAll(Project.class, TYPE);
    }
    
    @Override
    public void deleteById(String id) {
        fileSystemRepository.deleteById(id, TYPE);
    }
    
    @Override
    public boolean existsById(String id) {
        return fileSystemRepository.existsById(id, TYPE);
    }
    
    @Override
    public List<Project> findByName(String name) {
        return fileSystemRepository.findAll(Project.class, TYPE).stream()
            .filter(project -> project.getName().contains(name))
            .collect(Collectors.toList());
    }
}


